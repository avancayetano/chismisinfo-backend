"""
This type stub file was generated by pyright.
"""

import dataclasses
import datetime
import enum
import snscrape.base
import typing

__all__ = [
    "Tweet",
    "Medium",
    "Photo",
    "VideoVariant",
    "Video",
    "Gif",
    "TextLink",
    "Coordinates",
    "Place",
    "User",
    "UserLabel",
    "Trend",
    "GuestTokenManager",
    "TwitterSearchScraper",
    "TwitterUserScraper",
    "TwitterProfileScraper",
    "TwitterHashtagScraper",
    "TwitterCashtagScraper",
    "TwitterTweetScraperMode",
    "TwitterTweetScraper",
    "TwitterListPostsScraper",
    "TwitterTrendsScraper",
]
_logger = ...
_API_AUTHORIZATION_HEADER = ...
_globalGuestTokenManager = ...
_GUEST_TOKEN_VALIDITY = ...
_CIPHERS_CHROME = ...

@dataclasses.dataclass
class Tweet(snscrape.base.Item):
    url: str
    date: datetime.datetime
    rawContent: str
    renderedContent: str
    id: int
    user: User
    replyCount: int
    retweetCount: int
    likeCount: int
    quoteCount: int
    conversationId: int
    lang: str
    source: typing.Optional[str] = ...
    sourceUrl: typing.Optional[str] = ...
    sourceLabel: typing.Optional[str] = ...
    links: typing.Optional[typing.List[TextLink]] = ...
    media: typing.Optional[typing.List[Medium]] = ...
    retweetedTweet: typing.Optional[Tweet] = ...
    quotedTweet: typing.Optional[Tweet] = ...
    inReplyToTweetId: typing.Optional[int] = ...
    inReplyToUser: typing.Optional[User] = ...
    mentionedUsers: typing.Optional[typing.List[User]] = ...
    coordinates: typing.Optional[Coordinates] = ...
    place: typing.Optional[Place] = ...
    hashtags: typing.Optional[typing.List[str]] = ...
    cashtags: typing.Optional[typing.List[str]] = ...
    card: typing.Optional[Card] = ...
    viewCount: typing.Optional[int] = ...
    vibe: typing.Optional[Vibe] = ...
    username = ...
    outlinks = ...
    outlinksss = ...
    tcooutlinks = ...
    tcooutlinksss = ...
    content = ...
    def __str__(self) -> str: ...

@dataclasses.dataclass
class TextLink:
    text: typing.Optional[str]
    url: str
    tcourl: typing.Optional[str]
    indices: typing.Tuple[int, int]
    ...

class Medium: ...

@dataclasses.dataclass
class Photo(Medium):
    previewUrl: str
    fullUrl: str
    altText: typing.Optional[str] = ...

@dataclasses.dataclass
class VideoVariant:
    url: str
    contentType: typing.Optional[str]
    bitrate: typing.Optional[int]
    ...

@dataclasses.dataclass
class Video(Medium):
    thumbnailUrl: str
    variants: typing.List[VideoVariant]
    duration: typing.Optional[float] = ...
    views: typing.Optional[int] = ...
    altText: typing.Optional[str] = ...

@dataclasses.dataclass
class Gif(Medium):
    thumbnailUrl: str
    variants: typing.List[VideoVariant]
    altText: typing.Optional[str] = ...

@dataclasses.dataclass
class Coordinates:
    longitude: float
    latitude: float
    ...

@dataclasses.dataclass
class Place:
    id: str
    fullName: str
    name: str
    type: str
    country: str
    countryCode: str
    ...

class Card: ...

@dataclasses.dataclass
class SummaryCard(Card):
    title: str
    url: str
    description: typing.Optional[str] = ...
    thumbnailUrl: typing.Optional[str] = ...
    siteUser: typing.Optional[User] = ...
    creatorUser: typing.Optional[User] = ...

@dataclasses.dataclass
class AppCard(SummaryCard): ...

@dataclasses.dataclass
class PollCard(Card):
    options: typing.List[PollOption]
    endDate: datetime.datetime
    duration: int
    finalResults: bool
    lastUpdateDate: typing.Optional[datetime.datetime] = ...
    medium: typing.Optional[Medium] = ...

@dataclasses.dataclass
class PollOption:
    label: str
    count: typing.Optional[int] = ...

@dataclasses.dataclass
class PlayerCard(Card):
    title: str
    url: str
    description: typing.Optional[str] = ...
    imageUrl: typing.Optional[str] = ...
    siteUser: typing.Optional[User] = ...

@dataclasses.dataclass
class PromoConvoCard(Card):
    actions: typing.List[PromoConvoAction]
    thankYouText: str
    medium: Medium
    thankYouUrl: typing.Optional[str] = ...
    thankYouTcoUrl: typing.Optional[str] = ...
    cover: typing.Optional[Photo] = ...

@dataclasses.dataclass
class PromoConvoAction:
    label: str
    tweet: str
    ...

@dataclasses.dataclass
class BroadcastCard(Card):
    id: str
    url: str
    title: typing.Optional[str] = ...
    state: typing.Optional[str] = ...
    broadcaster: typing.Optional[User] = ...
    thumbnailUrl: typing.Optional[str] = ...
    source: typing.Optional[str] = ...
    siteUser: typing.Optional[User] = ...

@dataclasses.dataclass
class PeriscopeBroadcastCard(Card):
    id: str
    url: str
    title: str
    description: str
    state: str
    totalParticipants: int
    thumbnailUrl: typing.Optional[str] = ...
    source: typing.Optional[str] = ...
    broadcaster: typing.Optional[User] = ...
    siteUser: typing.Optional[User] = ...

@dataclasses.dataclass
class EventCard(Card):
    event: Event
    ...

@dataclasses.dataclass
class Event:
    id: int
    category: str
    photo: Photo
    title: typing.Optional[str] = ...
    description: typing.Optional[str] = ...
    @property
    def url(self): ...

@dataclasses.dataclass
class NewsletterCard(Card):
    title: str
    description: str
    url: str
    revueAccountId: int
    issueCount: int
    imageUrl: typing.Optional[str] = ...

@dataclasses.dataclass
class NewsletterIssueCard(Card):
    newsletterTitle: str
    newsletterDescription: str
    issueTitle: str
    issueNumber: int
    url: str
    revueAccountId: int
    issueDescription: typing.Optional[str] = ...
    imageUrl: typing.Optional[str] = ...

@dataclasses.dataclass
class AmplifyCard(Card):
    id: str
    video: Video
    ...

@dataclasses.dataclass
class AppPlayerCard(Card):
    title: str
    video: Video
    appCategory: str
    playerOwnerId: int
    siteUser: typing.Optional[User] = ...

@dataclasses.dataclass
class SpacesCard(Card):
    url: str
    id: str
    ...

@dataclasses.dataclass
class MessageMeCard(Card):
    recipient: User
    url: str
    buttonText: str
    ...

UnifiedCardComponentKey = str
UnifiedCardDestinationKey = str
UnifiedCardMediumKey = str
UnifiedCardAppKey = str

@dataclasses.dataclass
class UnifiedCard(Card):
    componentObjects: typing.Dict[UnifiedCardComponentKey, UnifiedCardComponentObject]
    destinations: typing.Dict[UnifiedCardDestinationKey, UnifiedCardDestination]
    media: typing.Dict[UnifiedCardMediumKey, Medium]
    apps: typing.Optional[
        typing.Dict[UnifiedCardAppKey, typing.List[UnifiedCardApp]]
    ] = ...
    components: typing.Optional[typing.List[UnifiedCardComponentKey]] = ...
    swipeableLayoutSlides: typing.Optional[
        typing.List[UnifiedCardSwipeableLayoutSlide]
    ] = ...
    collectionLayoutSlides: typing.Optional[
        typing.List[UnifiedCardCollectionLayoutSlide]
    ] = ...
    type: typing.Optional[str] = ...
    def __post_init__(self): ...

class UnifiedCardComponentObject: ...

@dataclasses.dataclass
class UnifiedCardDetailComponentObject(UnifiedCardComponentObject):
    content: str
    destinationKey: UnifiedCardDestinationKey
    ...

@dataclasses.dataclass
class UnifiedCardMediumComponentObject(UnifiedCardComponentObject):
    mediumKey: UnifiedCardMediumKey
    destinationKey: UnifiedCardDestinationKey
    ...

@dataclasses.dataclass
class UnifiedCardButtonGroupComponentObject(UnifiedCardComponentObject):
    buttons: typing.List[UnifiedCardButton]
    ...

@dataclasses.dataclass
class UnifiedCardButton:
    text: str
    destinationKey: UnifiedCardDestinationKey
    ...

@dataclasses.dataclass
class UnifiedCardSwipeableMediaComponentObject(UnifiedCardComponentObject):
    media: typing.List[UnifiedCardSwipeableMediaMedium]
    ...

@dataclasses.dataclass
class UnifiedCardSwipeableMediaMedium:
    mediumKey: UnifiedCardMediumKey
    destinationKey: UnifiedCardDestinationKey
    ...

@dataclasses.dataclass
class UnifiedCardAppStoreComponentObject(UnifiedCardComponentObject):
    appKey: UnifiedCardAppKey
    destinationKey: UnifiedCardDestinationKey
    ...

@dataclasses.dataclass
class UnifiedCardTwitterListDetailsComponentObject(UnifiedCardComponentObject):
    name: str
    memberCount: int
    subscriberCount: int
    user: User
    destinationKey: UnifiedCardDestinationKey
    ...

@dataclasses.dataclass
class UnifiedCardTwitterCommunityDetailsComponentObject(UnifiedCardComponentObject):
    name: str
    theme: str
    membersCount: int
    destinationKey: UnifiedCardDestinationKey
    membersFacepile: typing.Optional[typing.List[User]] = ...

@dataclasses.dataclass
class UnifiedCardDestination:
    url: typing.Optional[str] = ...
    appKey: typing.Optional[UnifiedCardAppKey] = ...
    mediumKey: typing.Optional[UnifiedCardMediumKey] = ...
    def __post_init__(self): ...

@dataclasses.dataclass
class UnifiedCardApp:
    type: str
    id: str
    title: str
    countryCode: str
    url: str
    category: typing.Optional[str] = ...
    description: typing.Optional[str] = ...
    iconMediumKey: typing.Optional[UnifiedCardMediumKey] = ...
    size: typing.Optional[int] = ...
    installs: typing.Optional[int] = ...
    ratingAverage: typing.Optional[float] = ...
    ratingCount: typing.Optional[int] = ...
    isFree: typing.Optional[bool] = ...
    isEditorsChoice: typing.Optional[bool] = ...
    hasInAppPurchases: typing.Optional[bool] = ...
    hasInAppAds: typing.Optional[bool] = ...

@dataclasses.dataclass
class UnifiedCardSwipeableLayoutSlide:
    mediumComponentKey: UnifiedCardComponentKey
    componentKey: UnifiedCardComponentKey
    ...

@dataclasses.dataclass
class UnifiedCardCollectionLayoutSlide:
    detailsComponentKey: UnifiedCardComponentKey
    mediumComponentKey: UnifiedCardComponentKey
    ...

@dataclasses.dataclass
class Vibe:
    text: str
    imageUrl: str
    imageDescription: str
    ...

@dataclasses.dataclass
class TweetRef(snscrape.base.Item):
    """A reference to a tweet for which no proper Tweet object could be produced from the data returned by Twitter"""

    id: int
    def __str__(self) -> str: ...

@dataclasses.dataclass
class Tombstone(snscrape.base.Item):
    """A placeholder for a tweet that cannot be accessed"""

    id: int
    text: typing.Optional[str] = ...
    textLinks: typing.Optional[typing.List[TextLink]] = ...
    def __str__(self) -> str: ...

@dataclasses.dataclass
class User(snscrape.base.Item):
    username: str
    id: int
    displayname: typing.Optional[str] = ...
    rawDescription: typing.Optional[str] = ...
    renderedDescription: typing.Optional[str] = ...
    descriptionLinks: typing.Optional[typing.List[TextLink]] = ...
    verified: typing.Optional[bool] = ...
    created: typing.Optional[datetime.datetime] = ...
    followersCount: typing.Optional[int] = ...
    friendsCount: typing.Optional[int] = ...
    statusesCount: typing.Optional[int] = ...
    favouritesCount: typing.Optional[int] = ...
    listedCount: typing.Optional[int] = ...
    mediaCount: typing.Optional[int] = ...
    location: typing.Optional[str] = ...
    protected: typing.Optional[bool] = ...
    link: typing.Optional[TextLink] = ...
    profileImageUrl: typing.Optional[str] = ...
    profileBannerUrl: typing.Optional[str] = ...
    label: typing.Optional[UserLabel] = ...
    descriptionUrls = ...
    linkUrl = ...
    linkTcourl = ...
    description = ...
    @property
    def url(self): ...
    def __str__(self) -> str: ...

@dataclasses.dataclass
class UserLabel:
    description: str
    url: typing.Optional[str] = ...
    badgeUrl: typing.Optional[str] = ...
    longDescription: typing.Optional[str] = ...

@dataclasses.dataclass
class UserRef:
    id: int
    text: typing.Optional[str] = ...
    textLinks: typing.Optional[typing.List[TextLink]] = ...
    def __str__(self) -> str: ...

@dataclasses.dataclass
class Community(snscrape.base.Item):
    id: int
    name: str
    created: datetime.datetime
    admin: typing.Union[User, UserRef]
    creator: typing.Union[User, UserRef]
    membersFacepile: typing.List[typing.Union[User, UserRef]]
    moderatorsCount: int
    membersCount: int
    rules: typing.List[str]
    theme: str
    bannerUrl: str
    description: typing.Optional[str] = ...

@dataclasses.dataclass
class Trend(snscrape.base.Item):
    name: str
    domainContext: str
    metaDescription: typing.Optional[str] = ...
    def __str__(self) -> str: ...

class _ScrollDirection(enum.Enum):
    TOP = ...
    BOTTOM = ...
    BOTH = ...

class GuestTokenManager:
    def __init__(self) -> None: ...
    @property
    def token(self): ...
    @token.setter
    def token(self, token): ...
    @property
    def setTime(self): ...
    def reset(self): ...

class _CLIGuestTokenManager(GuestTokenManager):
    def __init__(self) -> None: ...
    @property
    def token(self): ...
    @token.setter
    def token(self, token): ...
    @property
    def setTime(self): ...
    def reset(self): ...

class _TwitterTLSAdapter(snscrape.base._HTTPSAdapter):
    def init_poolmanager(self, *args, **kwargs): ...

class _TwitterAPIType(enum.Enum):
    V2 = ...
    GRAPHQL = ...

class _TwitterAPIScraper(snscrape.base.Scraper):
    def __init__(
        self, baseUrl, *, guestTokenManager=..., maxEmptyPages=..., **kwargs
    ) -> None: ...

class TwitterSearchScraperMode(enum.Enum):
    LIVE = ...
    TOP = ...
    USER = ...

class TwitterSearchScraper(_TwitterAPIScraper):
    name = ...
    def __init__(
        self, query, *, cursor=..., mode=..., top=..., maxEmptyPages=..., **kwargs
    ) -> None: ...
    def get_items(self) -> typing.List[Tweet]: ...

class TwitterUserScraper(TwitterSearchScraper):
    name = ...
    def __init__(self, user, **kwargs) -> None: ...
    def get_items(self): ...
    @staticmethod
    def is_valid_username(s): ...

class TwitterProfileScraper(TwitterUserScraper):
    name = ...
    def get_items(self): ...

class TwitterHashtagScraper(TwitterSearchScraper):
    name = ...
    def __init__(self, hashtag, **kwargs) -> None: ...

class TwitterCashtagScraper(TwitterSearchScraper):
    name = ...
    def __init__(self, cashtag, **kwargs) -> None: ...

class TwitterTweetScraperMode(enum.Enum):
    SINGLE = ...
    SCROLL = ...
    RECURSE = ...

class TwitterTweetScraper(_TwitterAPIScraper):
    name = ...
    def __init__(self, tweetId, *, mode=..., **kwargs) -> None: ...
    def get_items(self): ...

class TwitterListPostsScraper(TwitterSearchScraper):
    name = ...
    def __init__(self, listName, **kwargs) -> None: ...

class TwitterCommunityScraper(_TwitterAPIScraper):
    name = ...
    def __init__(self, communityId, **kwargs) -> None: ...
    def get_items(self): ...

class TwitterTrendsScraper(_TwitterAPIScraper):
    name = ...
    def __init__(self, **kwargs) -> None: ...
    def get_items(self): ...
